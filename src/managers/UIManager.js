/**
 * –ú–µ–Ω–µ–¥–∂–µ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
 */
export class UIManager {
    constructor() {
        this.elements = {
            fps: document.getElementById('fps'),
            objects: document.getElementById('objects'),
            triangles: document.getElementById('triangles'),
            time: document.getElementById('time')
        };
        
        this.lastUpdateTime = 0;
        this.updateInterval = 100; // –û–±–Ω–æ–≤–ª—è—Ç—å UI –∫–∞–∂–¥—ã–µ 100ms –¥–ª—è –ø–ª–∞–≤–Ω–æ—Å—Ç–∏
        
        this.init();
    }

    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è UI –º–µ–Ω–µ–¥–∂–µ—Ä–∞
     */
    init() {
        console.log('üñ•Ô∏è UI Manager –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
        this.setupEventListeners();
    }

    /**
     * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π
     */
    setupEventListeners() {
        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∞–≤–∏—à –¥–ª—è –±—ã—Å—Ç—Ä—ã—Ö –∫–æ–º–∞–Ω–¥
        document.addEventListener('keydown', (event) => {
            this.handleKeyPress(event);
        });

        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞ –æ–∫–Ω–∞
        window.addEventListener('resize', () => {
            this.onWindowResize();
        });
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –∫–ª–∞–≤–∏—à
     * @param {KeyboardEvent} event - –°–æ–±—ã—Ç–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
     */
    handleKeyPress(event) {
        switch (event.code) {
            case 'KeyH':
                this.toggleHelp();
                break;
            case 'KeyF':
                this.toggleFullscreen();
                break;
            case 'KeyS':
                if (event.ctrlKey) {
                    event.preventDefault();
                    this.saveScreenshot();
                }
                break;
            case 'Escape':
                this.hideAllPanels();
                break;
        }
    }

    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ UI
     * @param {Object} stats - –û–±—ä–µ–∫—Ç —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
     */
    update(stats) {
        const now = Date.now();
        
        // –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ —á–∞—Å—Ç–æ—Ç—ã –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è UI
        if (now - this.lastUpdateTime < this.updateInterval) {
            return;
        }
        
        this.lastUpdateTime = now;

        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ UI
        if (this.elements.fps && stats.fps !== undefined) {
            this.elements.fps.textContent = stats.fps;
            this.updateFPSColor(stats.fps);
        }

        if (this.elements.objects && stats.objects !== undefined) {
            this.elements.objects.textContent = stats.objects;
        }

        if (this.elements.triangles && stats.triangles !== undefined) {
            this.elements.triangles.textContent = this.formatNumber(stats.triangles);
        }

        if (this.elements.time && stats.time !== undefined) {
            this.elements.time.textContent = stats.time;
        }
    }

    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ü–≤–µ—Ç–∞ FPS –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
     * @param {number} fps - –¢–µ–∫—É—â–∏–π FPS
     */
    updateFPSColor(fps) {
        if (!this.elements.fps) return;

        if (fps >= 55) {
            this.elements.fps.style.color = '#00ff00'; // –ó–µ–ª–µ–Ω—ã–π
        } else if (fps >= 30) {
            this.elements.fps.style.color = '#ffaa00'; // –û—Ä–∞–Ω–∂–µ–≤—ã–π
        } else {
            this.elements.fps.style.color = '#ff0000'; // –ö—Ä–∞—Å–Ω—ã–π
        }
    }

    /**
     * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–æ–ª—å—à–∏—Ö —á–∏—Å–µ–ª
     * @param {number} num - –ß–∏—Å–ª–æ –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
     * @returns {string} –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —á–∏—Å–ª–æ
     */
    formatNumber(num) {
        if (num >= 1000000) {
            return (num / 1000000).toFixed(1) + 'M';
        } else if (num >= 1000) {
            return (num / 1000).toFixed(1) + 'K';
        }
        return num.toString();
    }

    /**
     * –ü–æ–∫–∞–∑–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
     * @param {string} message - –¢–µ–∫—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
     * @param {string} type - –¢–∏–ø —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è (info, warning, error, success)
     * @param {number} duration - –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø–æ–∫–∞–∑–∞ –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö
     */
    showNotification(message, type = 'info', duration = 3000) {
        const notification = document.createElement('div');
        notification.className = `notification notification-${type}`;
        notification.textContent = message;
        
        // –°—Ç–∏–ª–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        Object.assign(notification.style, {
            position: 'fixed',
            top: '20px',
            right: '20px',
            padding: '12px 20px',
            borderRadius: '8px',
            color: 'white',
            fontWeight: 'bold',
            zIndex: '1000',
            boxShadow: '0 4px 12px rgba(0, 0, 0, 0.3)',
            backdropFilter: 'blur(10px)',
            border: '1px solid rgba(255, 255, 255, 0.2)',
            transition: 'all 0.3s ease'
        });

        // –¶–≤–µ—Ç–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞
        const colors = {
            info: 'rgba(0, 123, 255, 0.8)',
            warning: 'rgba(255, 193, 7, 0.8)',
            error: 'rgba(220, 53, 69, 0.8)',
            success: 'rgba(40, 167, 69, 0.8)'
        };
        
        notification.style.backgroundColor = colors[type] || colors.info;

        document.body.appendChild(notification);

        // –ê–Ω–∏–º–∞—Ü–∏—è –ø–æ—è–≤–ª–µ–Ω–∏—è
        setTimeout(() => {
            notification.style.transform = 'translateX(0)';
            notification.style.opacity = '1';
        }, 10);

        // –£–¥–∞–ª–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        setTimeout(() => {
            notification.style.transform = 'translateX(100%)';
            notification.style.opacity = '0';
            setTimeout(() => {
                if (notification.parentNode) {
                    notification.parentNode.removeChild(notification);
                }
            }, 300);
        }, duration);
    }

    /**
     * –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –ø–æ–ª–Ω–æ—ç–∫—Ä–∞–Ω–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞
     */
    toggleFullscreen() {
        if (!document.fullscreenElement) {
            document.documentElement.requestFullscreen().then(() => {
                this.showNotification('–ü–æ–ª–Ω–æ—ç–∫—Ä–∞–Ω–Ω—ã–π —Ä–µ–∂–∏–º –≤–∫–ª—é—á–µ–Ω', 'info');
            }).catch(() => {
                this.showNotification('–û—à–∏–±–∫–∞ –≤–∫–ª—é—á–µ–Ω–∏—è –ø–æ–ª–Ω–æ—ç–∫—Ä–∞–Ω–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞', 'error');
            });
        } else {
            document.exitFullscreen().then(() => {
                this.showNotification('–ü–æ–ª–Ω–æ—ç–∫—Ä–∞–Ω–Ω—ã–π —Ä–µ–∂–∏–º –≤—ã–∫–ª—é—á–µ–Ω', 'info');
            });
        }
    }

    /**
     * –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –ø–∞–Ω–µ–ª–∏ –ø–æ–º–æ—â–∏
     */
    toggleHelp() {
        let helpPanel = document.getElementById('help-panel');
        
        if (!helpPanel) {
            helpPanel = this.createHelpPanel();
            document.body.appendChild(helpPanel);
        }
        
        helpPanel.style.display = helpPanel.style.display === 'none' ? 'block' : 'none';
    }

    /**
     * –°–æ–∑–¥–∞–Ω–∏–µ –ø–∞–Ω–µ–ª–∏ –ø–æ–º–æ—â–∏
     * @returns {HTMLElement} –≠–ª–µ–º–µ–Ω—Ç –ø–∞–Ω–µ–ª–∏ –ø–æ–º–æ—â–∏
     */
    createHelpPanel() {
        const panel = document.createElement('div');
        panel.id = 'help-panel';
        panel.innerHTML = `
            <div style="position: fixed; top: 50%; left: 50%; transform: translate(-50%, -50%);
                        background: rgba(0, 0, 0, 0.9); backdrop-filter: blur(10px);
                        padding: 30px; border-radius: 15px; color: white; z-index: 1000;
                        border: 1px solid rgba(255, 255, 255, 0.2); max-width: 500px;">
                <h2 style="margin: 0 0 20px 0; color: #00ffff; text-align: center;">
                    üöÄ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
                </h2>
                <div style="line-height: 1.8;">
                    <div><span style="color: #00ffff;">–ú—ã—à—å:</span> –í—Ä–∞—â–µ–Ω–∏–µ –∏ –ø—Ä–∏–±–ª–∏–∂–µ–Ω–∏–µ</div>
                    <div><span style="color: #00ffff;">H:</span> –ü–æ–∫–∞–∑–∞—Ç—å/—Å–∫—Ä—ã—Ç—å –ø–æ–º–æ—â—å</div>
                    <div><span style="color: #00ffff;">F:</span> –ü–æ–ª–Ω–æ—ç–∫—Ä–∞–Ω–Ω—ã–π —Ä–µ–∂–∏–º</div>
                    <div><span style="color: #00ffff;">Ctrl+S:</span> –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å–∫—Ä–∏–Ω—à–æ—Ç</div>
                    <div><span style="color: #00ffff;">ESC:</span> –ó–∞–∫—Ä—ã—Ç—å –ø–∞–Ω–µ–ª–∏</div>
                    <div><span style="color: #00ffff;">1-9:</span> –ë—ã—Å—Ç—Ä—ã–π –ø–µ—Ä–µ—Ö–æ–¥ –∫ –ø–ª–∞–Ω–µ—Ç–∞–º</div>
                </div>
                <div style="text-align: center; margin-top: 20px;">
                    <button onclick="this.parentElement.parentElement.style.display='none'"
                            style="background: #00ffff; color: black; border: none; padding: 10px 20px;
                                   border-radius: 5px; cursor: pointer; font-weight: bold;">
                        –ó–∞–∫—Ä—ã—Ç—å
                    </button>
                </div>
            </div>
        `;
        
        return panel;
    }

    /**
     * –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞ (–∑–∞–≥–ª—É—à–∫–∞)
     */
    saveScreenshot() {
        this.showNotification('–§—É–Ω–∫—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–∫—Ä–∏–Ω—à–æ—Ç–∞ –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∞ –ø–æ–∑–∂–µ', 'info');
    }

    /**
     * –°–∫—Ä—ã—Ç–∏–µ –≤—Å–µ—Ö –ø–∞–Ω–µ–ª–µ–π
     */
    hideAllPanels() {
        const helpPanel = document.getElementById('help-panel');
        if (helpPanel) {
            helpPanel.style.display = 'none';
        }
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞ –æ–∫–Ω–∞
     */
    onWindowResize() {
        // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –∞–¥–∞–ø—Ç–∞—Ü–∏–∏ UI –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ä–∞–∑–º–µ—Ä–∞ –æ–∫–Ω–∞
        console.log('Window resized');
    }

    /**
     * –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ –≤ UI
     * @param {string} text - –¢–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏
     * @param {Function} callback - –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –≤—ã–∑–æ–≤–∞
     * @param {string} container - ID –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ –¥–ª—è –∫–Ω–æ–ø–∫–∏
     * @returns {HTMLElement} –°–æ–∑–¥–∞–Ω–Ω–∞—è –∫–Ω–æ–ø–∫–∞
     */
    addButton(text, callback, container = 'ui-overlay') {
        const button = document.createElement('button');
        button.textContent = text;
        button.style.cssText = `
            background: rgba(0, 255, 255, 0.8);
            color: black;
            border: none;
            padding: 10px 15px;
            margin: 5px;
            border-radius: 5px;
            cursor: pointer;
            font-weight: bold;
            transition: all 0.3s ease;
        `;
        
        button.addEventListener('click', callback);
        button.addEventListener('mouseenter', () => {
            button.style.background = 'rgba(0, 255, 255, 1)';
            button.style.transform = 'scale(1.05)';
        });
        button.addEventListener('mouseleave', () => {
            button.style.background = 'rgba(0, 255, 255, 0.8)';
            button.style.transform = 'scale(1)';
        });
        
        const containerElement = document.getElementById(container);
        if (containerElement) {
            containerElement.appendChild(button);
        }
        
        return button;
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å —ç–ª–µ–º–µ–Ω—Ç UI –ø–æ ID
     * @param {string} id - ID —ç–ª–µ–º–µ–Ω—Ç–∞
     * @returns {HTMLElement|null} –≠–ª–µ–º–µ–Ω—Ç –∏–ª–∏ null
     */
    getElement(id) {
        return document.getElementById(id);
    }

    /**
     * –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤–∏–¥–∏–º–æ—Å—Ç—å —ç–ª–µ–º–µ–Ω—Ç–∞
     * @param {string} id - ID —ç–ª–µ–º–µ–Ω—Ç–∞
     * @param {boolean} visible - –í–∏–¥–∏–º–æ—Å—Ç—å
     */
    setElementVisible(id, visible) {
        const element = document.getElementById(id);
        if (element) {
            element.style.display = visible ? 'block' : 'none';
        }
    }
} 